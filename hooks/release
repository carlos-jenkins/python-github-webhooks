#!/bin/bash

JSON_FILE="$1"
EVENT_TYPE="$2"
VERSION="$3"
LANGUAGE="$4"
REPOPATH="$5"
PIPELINE_DIR_PATH="$6"
PIPELINE_FILE="$7"

R_ACTION=$(jq -r ".action" $JSON_FILE)
ZIPBALL_URL=$(jq -r ".release.zipball_url" $JSON_FILE)
TAG_NAME=$(jq -r ".release.tag_name" $JSON_FILE)
REPO_URL=$(jq -r ".repository.html_url" $JSON_FILE)
REPO_NAME=$(jq -r ".repository.name" $JSON_FILE)
ORG_NAME=$(echo $REPO_URL | cut -d"/" -f4)

runAllinconfigLoader=1

case "$R_ACTION" in
  published)
    # Loading functions
    source $(dirname $0)/../functions/functions.sh

    echo "${GCP_KEY}" > /tmp/key.json
    echo "Building for ${R_ACTION}, ${TAG_NAME}, ${REPO_URL}"
    gcloud auth activate-service-account --key-file=/tmp/key.json
    # Including hidden files in *
    shopt -s dotglob
    cd "${REPOPATH}"

    if [ "${PIPELINE_FILE}" == "" ]; then
      echo "DEPRECATED: ${REPO_NAME} does not have a .lmes-ci.yaml file"
      if [ -s cloudbuild.yaml ]; then
        # File cloudbuild.yaml exists in repo, we do nothing
        echo "Found cloudbuild.yaml in source repository"
        #:
      elif ls -1 *.tf > /dev/null 2>&1 && cat *.tf | tr -d '\n' | grep -q 'terraform.*{'; then
        # Repo is for IAC, we copy the cloudbuild file for terraform
        echo "Found IAC terraform project"
        cp -af  ${PIPELINE_DIR_PATH}/cloudbuild_terraform.yaml ./cloudbuild.yaml
      elif [ "${REPO_NAME}" == "lmes-fieldservice-customization" ]; then
        # Repo is for field service customization, we copy the cloudbuild file
        echo "Found field service customization project"
        cp -af  ${PIPELINE_DIR_PATH}/cloudbuild_field_service.yaml ./cloudbuild.yaml
        # Run allinconfig loader
        runAllinconfigLoader=0
      elif grep -q "eu.gcr.io/gcp-tooling-pro-eslm/github.com/adeo/lmes-docker-base-images" ./Dockerfile && ! grep -q "runner" ./Dockerfile; then
        #Artifact only
        echo "Artifact only project"
        case $LANGUAGE in
        Java)
            GROUP=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='groupId']/text()" pom.xml)
            ARTIFACT=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='artifactId']/text()" pom.xml)
            VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
            REPO_TAG="${GROUP}.${ARTIFACT}-${VERSION}"
            cp -af  ${PIPELINE_DIR_PATH}/cloudbuild_artifacts.yaml ./cloudbuild.yaml
            sed -i "s/###REPO_TAG###/${REPO_TAG}/g" ./cloudbuild.yaml
            ;;
        *)
            cp -af  ${PIPELINE_DIR_PATH}/cloudbuild_artifacts.yaml ./cloudbuild.yaml
            sed -i "s/###REPO_TAG###/Unknown/g" ./cloudbuild.yaml
            ;;
        esac
      else
        # Copy the generic file
        echo "Copying generic file"
        cp -af  ${PIPELINE_DIR_PATH}/cloudbuild.yaml .
      fi
    else
        echo "Copying the project file ${PIPELINE_FILE}"
        cp -af $PIPELINE_FILE ./cloudbuild.yaml
    fi

    WORK_DIR=$(mktemp -d)
    tar cvzf ${WORK_DIR}/${TAG_NAME}.tar.gz *
    # Excluding hidden files in *
    shopt -u dotglob
    gsutil cp ${WORK_DIR}/${TAG_NAME}.tar.gz gs://${GS_BUCKET_NAME}
    rm ${WORK_DIR}/${TAG_NAME}.tar.gz

    gcloud config set project ${GCP_PROJECT_NAME}

    if [ $runAllinconfigLoader -eq 0 ]; then
       # Getting configuration of allinconfig
       get_configuration_allinconfig
       [ $? -ne 0 ] && { echo "ERROR: Not getting configuration of allinconfig"; exit 1; } 
    fi

    # echo "gcloud builds submit gs://${GS_BUCKET_NAME}/${TAG_NAME}.tar.gz --async --substitutions TAG_NAME=${TAG_NAME},REPO_NAME=${REPO_NAME},_ORG_NAME=${ORG_NAME}${subs_allinconfig}"    
    gcloud builds submit gs://${GS_BUCKET_NAME}/${TAG_NAME}.tar.gz --async --substitutions TAG_NAME=${TAG_NAME},REPO_NAME=${REPO_NAME},_ORG_NAME=${ORG_NAME},_GS_BUCKET_NAME="${GS_BUCKET_NAME}"${subs_allinconfig}
    ret=$?
  ;;
  *)
    echo "Skipping release event type $R_ACTION"
  ;;
esac

exit ${ret:-1}
