#!/bin/bash

JSON_FILE="$1"
EVENT_TYPE="$2"
VERSION="$3"
LANGUAGE="$4"

REF_TYPE=$(jq -r ".ref" $JSON_FILE | cut -d"/" -f2)
if [ "${REF_TYPE}" == "tags" ]; then
    TAG_NAME=$(jq -r ".ref" $JSON_FILE | cut -d"/" -f3)
else
    BRANCH_NAME=$(jq -r ".ref" $JSON_FILE | cut -d"/" -f3)
fi
COMMIT_ID=$(jq -r ".head_commit.id" $JSON_FILE)
REPO_URL=$(jq -r ".repository.html_url" $JSON_FILE)
REPO_NAME=$(jq -r ".repository.name" $JSON_FILE)
COMMIT_SHA=$(echo ${COMMIT_ID} | cut -c1-7)
ORG_NAME=$(echo $REPO_URL | cut -d"/" -f4)

runAllinconfigLoader=1

# Loading functions
source $(dirname $0)/../functions/functions.sh

echo "${GCP_KEY}" > /tmp/key.json
rm -rf /tmp/${REPO_NAME}-${COMMIT_ID}
echo "Building for ${REF_TYPE}, ${BRANCH_NAME}, ${TAG_NAME}, ${COMMIT_ID}, ${REPO_URL}, ${REPO_URL}/archive/${COMMIT_ID}.zip"
gcloud auth activate-service-account --key-file=/tmp/key.json
curl -s -L --user "${GITHUB_USER}:${GITHUB_TOKEN}" ${REPO_URL}/archive/${COMMIT_ID}.zip --output /tmp/${COMMIT_ID}.zip
#wget -O /tmp/${COMMIT_ID}.zip "${REPO_URL}/archive/${COMMIT_ID}.zip"
#mkdir /tmp/${COMMIT_ID}
unzip -o /tmp/${COMMIT_ID}.zip -d /tmp/
# Including hidden files in *
shopt -s dotglob
#mv /tmp/${REPO_NAME}*/* /tmp/${COMMIT_ID}
cd /tmp/${REPO_NAME}-${COMMIT_ID}
tar cvzf /tmp/${COMMIT_ID}.tar.gz *
# Excluding hidden files in *
shopt -u dotglob
gsutil cp /tmp/${COMMIT_ID}.tar.gz gs://${GS_BUCKET_NAME}
#gcloud config set builds/use_kaniko True
gcloud config set project ${GCP_PROJECT_NAME}

# Setting TAG_NAME value if it's empty
[ -z ${TAG_NAME} ] && TAG_NAME=${VERSION}

# Checking cloudbuild
if [ -s cloudbuild.yaml ]; then
    echo "Found cloudbuild.yaml in source repository"
elif ls -1 *.tf > /dev/null 2>&1 && cat *.tf | tr -d '\n' | grep -q 'terraform.*{'; then
    # Repo is for IAC, we copy the cloudbuild file for terraform
    echo "Found IAC terraform project"
    cp -af /app/cloudbuild_files/cloudbuild_terraform.yaml ./cloudbuild.yaml
elif [ "${REPO_NAME}" == "lmes-fieldservice-customization" ]; then
    # Repo is for field service customization, we copy the cloudbuild file 
    echo "Found field service customization project"
    cp -af /app/cloudbuild_files/cloudbuild_field_service.yaml ./cloudbuild.yaml

    # Run allinconfig loader
    runAllinconfigLoader=0
elif grep -q "eu.gcr.io/gcp-tooling-pro-eslm/github.com/adeo/lmes-docker-base-images" ./Dockerfile && ! grep -q "runner" ./Dockerfile; then
    #Artifact only
    echo "Artifact only project"
    case $LANGUAGE in
    Java)
        GROUP=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='groupId']/text()" pom.xml)
        ARTIFACT=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='artifactId']/text()" pom.xml)
        VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
        REPO_TAG="${GROUP}.${ARTIFACT}-${VERSION}"
        cp -af /app/cloudbuild_files/cloudbuild_artifacts.yaml ./cloudbuild.yaml
        sed -i "s/###REPO_TAG###/${REPO_TAG}/g" ./cloudbuild.yaml
        ;;
    *)
        cp -af /app/cloudbuild_files/cloudbuild_artifacts.yaml ./cloudbuild.yaml
        sed -i "s/###REPO_TAG###/Unknown/g" ./cloudbuild.yaml
        ;;
    esac
else
    echo "Copying generic file"
    cp -af /app/cloudbuild_files/cloudbuild.yaml .
fi

if [ $runAllinconfigLoader -eq 0 ]; then
   # Getting configuration of allinconfig and setting subs_allinconfig var
   get_configuration_allinconfig
   [ $? -ne 0 ] && { echo "ERROR: Not getting configuration of allinconfig"; exit 1; }
fi

gcloud builds submit gs://${GS_BUCKET_NAME}/${COMMIT_ID}.tar.gz --async --config cloudbuild.yaml --substitutions SHORT_SHA=${COMMIT_SHA},REPO_NAME=${REPO_NAME},_ORG_NAME=${ORG_NAME},COMMIT_SHA=${COMMIT_ID},TAG_NAME=${TAG_NAME},_GS_BUCKET_NAME="${GS_BUCKET_NAME}"${subs_allinconfig}
ret=$?

exit ${ret:-1}
